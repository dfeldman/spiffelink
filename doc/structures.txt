// This is passed in many places so they can get the config data and logger
type SpiffeLinkCore struct {
	Logger *logrus.Logger
	Config *config.Config
}

// This aggregates all the SVIDs and bundles retrieved from the Workload API.
// There is no guarantee that all of these are valid, or that the SVIDs correspond
// to the bundles (any given SVID might not have a related bundle).
type SpiffeLinkUpdate struct {
	Bundles []*x509bundle.Bundle
	Svids   []*x509svid.SVID
}

// This is the configuration data for one database. Several of these are stroed in Config.
type DatabaseConfig struct {
	Name             string
	Type             string
	ConnectionString string
	SpiffeID         string
	ParsedSpiffeID   *url.URL
}

// This is the configuration data for the whole program. 
type Config struct {
	SpiffeAgentSocketPath string
	Databases             []DatabaseConfig
	OpenTelemetry         OpenTelemetryConfig
}

// The goal of the Step package is to make a series of Steps that can be called.
// Each Step consists of well-defined, preconditions, postconditions, execution, and
// undo/rollback substeps. By having these in a uniform format we can implement logging,
// telemetry, web interfaces , and error handling in ways that apply to every
// supported database.
// Each of the StepFuncs gets the same input, the StepFuncInput structure above.
type Step struct {
	// Human-readable name for the step
	Name string
	// Unique ID for this step
	Id string
	// Telemtry ID for the step (we report time and error status to telemetry)
	TelemetryID string
	// Check the binary dependencies and configuration for the step
	CheckDependencies StepFunc
	// Check any preconditions for the step
	Pre StepFunc
	// Execute the step itself
	Execute StepFunc
	// Check any postconditions for the step (it will fail if this fails)
	Post StepFunc
	// Undo the step
	Undo StepFunc
}

// Several Steps make a StepList
type StepList struct {
	Name  string
	Steps []Step
}

// SLError is used everywhere as the error type
type SLError struct {
	// A string we can reference in documentation
	Code ErrorCode
	// Time the error occurred. This is mostly used for ordering output
	Time time.Time
	// Underlying Go error. Especially useful for testing and logging
	Err error
	// Short header in the error message
	Heading string
	// Detailed contents of the error message
	DetailedMessage string
	// Fatal or nonfatal. We can make sure the program never proceeds if it's fatal.
	Severity Severity
}

type SLErrorList struct {
	Errors []SLError
}